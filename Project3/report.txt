OVERALL DESCRIPTION OF CLASS STRUCTURE
GraphObject
	Actor
		GhostRacer
		BorderLine
		Pedestrian
			Human Pedestrian
			Zombie Pedestrian
		ZombieCab
		OilSlick
		Goodie
			HealingGoodie
			HolyWaterGoodie
			SoulGoodie
		HolyWaterProjectile


PUBLIC MEMBER FUNCTIONS IN ACTOR CLASS
virtual void doSomething() = 0;
    The doSomething function for actors has them carry out the functions specified in the spec; each specific actor has to doSomething for every tick. I chose to define a pure virtual version of the doSomething() function in my base Actor class because all actors are able to doSomething, and each type of actor uses doSomething in a different way.
virtual bool isBorderLine() { return false; }
    This function returns true if the actor being analyzed is a BorderLine (white or yellow). This function is virtual because only the BorderLine's should return true, but I should be able to pass this function to all of my actors. Only the BorderLine's class has a isBorderLine function that returns true.
double getVSpeed() { return m_vSpeed; }
    This function returns the vertical speed. All actors return a vertical speed, so no need to make this a virtual function. This function behaves the same way for all the actors.
double getHSpeed() { return m_hSpeed; }
    AThis function returns the horizontal speed. ll actors return a horizontal speed, so no need to make this a virtual function. This function behaves the same way for all the actors.
bool isAlive() { return m_isAlive; }
    This function returns a boolean indicating if the actor is alive. All actors have a state of being alive or dead, so no need to make this a virtual function. This function behaves the same way for all the actors.
void setDead() { m_isAlive = false; }
    This function changes a boolean data member indicating the actor is now dead. All actors are set dead in the same way, so no need to make this a virtual function. This function behaves the same way for all the actors.
StudentWorld* getSW() { return m_sw; }
    This function returns the Student World the Actor is created in. No need to make this a virtual function, this function returns the "this" pointer that is passed in to the StudentWorld at the construction of the object. This function behaves the same way for all the actors. I used this function to access the GhostRacer from other actor classes: getSW()->getGhost();
void setVSpeed(double newSpeed) { m_vSpeed = newSpeed; }
    This function changes the vertical speed of an actor. All actors can change their vertical speed, so no need to make this a virtual function. This function behaves the same way for all the actors.
void setHSpeed(double newSpeed) { m_hSpeed = newSpeed; }
    This function changes the horizontal speed of an actor. All actors can change their horizontal speed, so no need to make this a virtual function. This function behaves the same way for all the actors.
int getHealth() { return m_health; }
    This function returns an actor's health. The health is only relevant for a select number of Actors (GhostRacer, ZombiePedestrian, ZombieCab, HumanPedestrian); that was enough actors for me to make this a function for the Actor class. This function behaves the same way for all the actors, but is only used for relevant actors. For example, I do not check the value for the BorderLine's, so I will never call this function, and although it will return a value, this value is irrelevant.
void changeHealth(int change);
    This function changes an actor's health. The health is only relevant for a select number of Actors (GhostRacer, ZombiePedestrian, ZombieCab, HumanPedestrian); that was enough actors for me to make this a function for the Actor class. This function behaves the same way for all the actors, but is only used for relevant actors. For example, I do not change the value of a BorderLine's health.
bool overlapGR();
    This function checks whether the following actor overlaps with the GhostRacer (as specified by the conditions in the spec). I did not make this function virtual or pure virtual because it behaves the same way for all Actors, and it is used by all the Actors. Many actors check if the GhostRacer overlaps with it (e.g. ZombieCab or HumanPedestrian).
bool overlapOtherActor(Actor* otherActor);
    This function checks whether the following actor overlaps with another actor from the parameter (as specified by the conditions in the spec). I did not make this function virtual or pure virtual because it behaves the same way for all Actors, and it is used by all the Actors. Many actors check is another actor overlaps with it (e.g. HolyWaterProjectile and ZombieCab).
void generalMove();
    All actors that move use the same algorithm, based on the GhostRacer's speeds. I made a non-virtual actor function because all of the actors move this way.
virtual bool CAWA() { return false; }
    This function returns whether an actor is a collision-avoidance worthy actor. This function is virtual because all actors except for the vehicles and pedestrian return false. Consequently, I made the Actor version return false. In the Pedestrian base class and the ZombieCab and GhostRacer classes I had this virtual function return true.
int getLane();
    This function returns the lane an actor resides in. All actors return the lane they reside in, so no need to make this a virtual function. This function behaves the same way for all the actors, checking its x coordinate.
int getHolyWater() { return m_holyWaterCharge; }
    This function returns the holy water charge of the GhostRacer. This function is only relevant to the GhostRacer, but I chose to include it in the Actor class for the following reason. My getGhost() function in Student World returns a pointer to an Actor, not specifically to the GhostRacer, so I would need to have this function in the Actor class.
void changeHW(int change) { m_holyWaterCharge += change; }
    This function returns the holy water charge of the GhostRacer, either increasing by ten if overlapping with a holy water goodie or decrementing by one if the GhostRacer launches a projectile. This function is only relevant to the GhostRacer, but I chose to include it in the Actor class for the following reason. My getGhost() function in Student World returns a pointer to an Actor, not specifically to the GhostRacer, so I would need to have this function in the Actor class.
virtual void saveSoul() { return; }
    This function is used by the GhostRacer to indicate another soul has been saved, changing the number of souls saved in a private member of the GhostRacer class. This function is only relevant to the GhostRacer, but I chose to include it in the Actor class for the following reason. My saveSoul() function in Student World returns a pointer to an Actor, not specifically to the GhostRacer, so I would need to have this function in the Actor class. The default for all actors is to just return, and to do nothing if not the Ghost Racer. The GhostRacer function adds one to the number of souls saved.
virtual int soulsSaved() { return 0; }
    This function is used by the GhostRacer to return how many souls have been saved, getting this information from the number of souls saved in a private member of the GhostRacer class. This function is only relevant to the GhostRacer, but I chose to include it in the Actor class for the following reason. My soulsSaved() function in Student World returns a pointer to an Actor, not specifically to the GhostRacer, so I would need to have this function in the Actor class. The default for all actors is to just return 0 (an arbitrary value), which is why I wanted to make this function virtual. By making this virtual, I could keep the data member for souls saved specific to the Ghost Racer: see the GhostRacer's implementation for saveSoul() below.
virtual bool affectedByHW() { return false; }
    This function returns true for only actors affected by holy water projectiles, which is why I made it virtual. Only certain goodies and the ZombieCab and general Pedestrians are affected by HolyWaterProjectile's. This is why I made the function virtual for actors, the default will return false.
virtual bool goodieAffectedByHW() { return false; }
    This function is a more specific version of the one above, returning true for only actors affected by holy water projectiles that are also a part of the Goodie class. This is why I made the function virtual for actors, the default will return false.
virtual bool isHuman() { return false; }
    This function returns true if the actor being analyzed is a HumanPedestrian. This function is virtual because only the HumanPedestrian's should return true, but I should be able to pass this function to all of my actors. Only the HumanPedestrian's class has a isHuman function that returns true.
virtual bool isZombie() { return false; }
    This function returns true if the actor being analyzed is a ZombiePedestrian. This function is virtual because only the ZombiePedestrian's should return true, but I should be able to pass this function to all of my actors. Only the ZombiePedestrian's class has a isZombie function that returns true.
virtual bool isZombieCab() { return false; }
    This function returns true if the actor being analyzed is a ZombieCab. This function is virtual because only the ZombieCab's should return true, but I should be able to pass this function to all of my actors. Only the ZombieCab's class has a isZombie function that returns true.


PUBLIC MEMBER FUNCTIONS IN GHOSTRACER CLASS
virtual void doSomething();
    This is the doSomething that all actors possess, but is specific to GhostRacer. It carries out this Actor's specific functions. It is virtual because all actors have a doSomething function.
virtual bool CAWA() { return true; }
    This function returns true because a GhostRacer is a collision-avoidance worthy actor. This function is virtual because all actors except for the vehicles and pedestrian return false.
virtual void saveSoul() { m_soulsSaved++; }
    This function is used by the GhostRacer to indicate another soul has been saved, changing the number of souls saved in a private member of the GhostRacer class. This function is only relevant to the GhostRacer, but it is virtual because I chose to include it in the Actor class for the following reason. My saveSoul() function in Student World returns a pointer to an Actor, not specifically to the GhostRacer, so I would need to have this function in the Actor class. The default for all actors is to just return, and to do nothing if not the Ghost Racer. The GhostRacer function adds one to the number of souls saved.
virtual int soulsSaved() { return m_soulsSaved; }
    This function is used by the GhostRacer to return how many souls have been saved, getting this information from the number of souls saved in a private member of the GhostRacer class. This function is only relevant to the GhostRacer, but it is virtual because I chose to include it in the Actor class for the following reason. My soulsSaved() function in Student World returns a pointer to an Actor, not specifically to the GhostRacer, so I would need to have this function in the Actor class. The default for all actors is to just return 0 (an arbitrary value), which is why I wanted to make this function virtual. By making this virtual, I could keep the data member for souls saved specific to the Ghost Racer: see the GhostRacer's implementation for saveSoul() below.


PUBLIC MEMBER FUNCTIONS IN BORDERLINE CLASS
virtual void doSomething();
    This is the doSomething that all actors possess, but is specific to BorderLine. It carries out this Actor's specific functions. It is virtual because all actors have a doSomething function.
virtual bool isBorderLine() { return true; }
    This function returns true because this class contains only BorderLine's. It is virtual because it returns false for all other Actors.

PUBLIC MEMBER FUNCTIONS IN PEDESTRIAN CLASS
virtual void doSomething();
    This is the doSomething that all actors possess, but is specific to Pedestrians. This doSomething is applicable to both the zombie and human pedestrians. It carries out this Actor's specific functions. It is virtual because all actors have a doSomething function.
void finishMovePed();
    This function is used only by HumanPedestrian's in the doSomething function because ZombiePedestrian's do not have this as a part of their things to do in every tick. It is not virtual because it does not apply to any superclass and any derived classes, it's just never called on a zombie pedestrian.
int getMPDistance() { return m_MPDistance; }
    This function is used by both zombie and human pedestrians. It returns the movement plan distance for the pedestrian. It is not virtual because it behaves the same way for both types of pedestrians.
void decMPDistance() { m_MPDistance--; }
    This function is used by both zombie and human pedestrians. It changes the movement plan distance for the pedestrian, decreasing it by one. It is not virtual because it behaves the same way for both types of pedestrians.
void changeMPDistance(int changeTo) { m_MPDistance = changeTo; }
    This function is used by both zombie and human pedestrians. It changes the movement plan distance for the pedestrian, assigning the value of the parameter to the m_MPDistance. It is not virtual because it behaves the same way for both types of pedestrians.
virtual bool CAWA() { return true; }
    This function returns whether or not the following Pedestrian is a collision-avoidance worthy actor, which is true for both types of Pedestrians. This function is virtual because it applies to Pedestrian's superclass of Actor, in which all actors use this function.
virtual void collideGR() = 0;
    This function is used to call the course of action when a Pedestrian collides with the Ghost Racer. It is pure virtual because the zombies and humans do completely different things when they collide with the Ghost Racer.
virtual void zombieChange() { return; }
    This function changes the zombie's direction if it is in front of GhostRacer. The function only returns by default, and the implementation specific to ZombiePedestrian is specified within the class. This is why I declared the function as virtual. I included it in the base class of Pedestrians because I call it within Pedestrian's doSomething, which is common to both humans and zombies.
virtual int ticksNextGrunt() { return 0; }
    This function the number of ticks until the next grunt of a ZombiePedestrian. The function only returns 0 by default, and the implementation specific to ZombiePedestrian is specified within the class. I declared the function as virtual so I would not have an extra data member that held the number of ticks until the next grunt in the general Pedestrian class when it is specific to the ZombiePedestrian's.
virtual void decTicks() { return; }
    This function decrements the number of ticks until the next grunt of a ZombiePedestrian. The function only returns by default, and the implementation specific to ZombiePedestrian is specified within the class. I declared the function as virtual so I would not have an extra data member that held the number of ticks until the next grunt in the general Pedestrian class when it is specific to the ZombiePedestrian's.
virtual void resetTicks() { return; }
    This function resets the number of ticks until the next grunt of a ZombiePedestrian. The function only returns by default, and the implementation specific to ZombiePedestrian is specified within the class. I declared the function as virtual so I would not have an extra data member that held the number of ticks until the next grunt in the general Pedestrian class when it is specific to the ZombiePedestrian's.
virtual bool affectedByHW() { return true; }
    This function returns true because both derived Pedestrian's are affected by Holy Water Projectiles. This function returns true for only actors affected by holy water projectiles, which is why I made it virtual. Only certain goodies and the ZombieCab and general Pedestrians are affected by HolyWaterProjectile's.


PUBLIC MEMBER FUNCTIONS IN HUMANPEDESTRIAN CLASS
virtual void collideGR();
    This function is used to call the course of action when a Human Pedestrian collides with the Ghost Racer. It is pure virtual because the zombies and humans do completely different things when they collide with the Ghost Racer, but both implementations can be called with this name depending on whether it is called on a human or a zombie.
virtual bool isHuman() { return true; }
    This function returns true because all HumanPedestrian's are human. The function is virtual because it can be passed to all actors.


PUBLIC MEMBER FUNCTIONS IN ZOMBIEPEDESTRIAN CLASS
virtual void collideGR();
    This function is used to call the course of action when a Zombie Pedestrian collides with the Ghost Racer. It is pure virtual because the zombies and humans do completely different things when they collide with the Ghost Racer, but both implementations can be called with this name depending on whether it is called on a human or a zombie.
virtual void zombieChange();
    This function changes the zombie's direction if it is in front of GhostRacer. The function only returns by default, and the implementation specific to ZombiePedestrian is specified within the class. This is why I declared the function as virtual. I included it in the base class of Pedestrians because I call it within Pedestrian's doSomething, which is common to both humans and zombies.
virtual int ticksNextGrunt() { return m_ticksNextGrunt; }
    This function the number of ticks until the next grunt of a ZombiePedestrian. The implementation specific to ZombiePedestrian is specified here, returning the integer value of the number of ticks until the next grunt. I declared the function as virtual so I would not have an extra data member that held the number of ticks until the next grunt in the general Pedestrian class when it is specific to the ZombiePedestrian's.
virtual void decTicks() { m_ticksNextGrunt--; }
    This function decrements the number of ticks until the next grunt of a ZombiePedestrian. The implementation specific to ZombiePedestrian is specified within this function. I declared the function as virtual so I would not have an extra data member that held the number of ticks until the next grunt in the general Pedestrian class when it is specific to the ZombiePedestrian's.
virtual void resetTicks() { m_ticksNextGrunt = 20; }
    This function resets the number of ticks until the next grunt of a ZombiePedestrian. The function only returns by default, and the implementation specific to ZombiePedestrian is specified within the class. I declared the function as virtual so I would not have an extra data member that held the number of ticks until the next grunt in the general Pedestrian class when it is specific to the ZombiePedestrian's.
virtual bool isZombie() { return true; }
    This function returns true because all ZombiePedestrian's are zombies. The function is virtual because it can be passed to all actors.


PUBLIC MEMBER FUNCTIONS IN ZOMBIECAB CLASS
virtual void doSomething();
    This is the doSomething that all actors possess, but is specific to ZombieCab's. It carries out this Actor's specific functions, as specified in the spec. It is virtual because all actors have a doSomething function.
bool hasDamagedGR() { return m_hasDamagedGR; }
    This function is responsible for keeping track of whether a zombie cab has damaged the Ghost Racer yet, returning true if it has. It is not virtual because it is specific to ZombieCab's and is not used in other classes.
void damageGR() { m_hasDamagedGR = true; }
    This function is responsible for telling the zombie cab that it has damaged the Ghost Racer. It is not virtual because it is specific to ZombieCab's and is not used in other classes.
int getMPDistance() { return m_MPDistance; }
    This function is used by zombie cabs. It returns the movement plan distance for the zombie cabs. It is not virtual because it is specific to zombie cabs.
void decMPDistance() { m_MPDistance--; }
    This function is used by zombie cabs. It changes the movement plan distance for the pedestrian, decreasing it by one. It is not virtual because it is specific to zombie cabs.
void changeMPDistance(int changeTo) { m_MPDistance = changeTo; }
    This function is used by zombie cabs. It changes the movement plan distance for the pedestrian, assigning the value of the parameter to the m_MPDistance. It is not virtual because it is specific to zombie cabs.
virtual bool CAWA() { return true; }
    This function returns whether or not the ZombieCab is a collision-avoidance worthy actor, which is true for both types of ZombieCabs. This function is virtual because it applies to ZombieCab's superclass of Actor, in which all actors use this function.
virtual bool affectedByHW() { return true; }
    This function returns true because a ZombieCab is affected by holy water projectiles. This function returns true for only actors affected by holy water projectiles, which is why I made it virtual. Only certain goodies and the ZombieCab and general Pedestrians are affected by HolyWaterProjectile's. This is why I made the function virtual for actors, the default will return false.
virtual bool isZombieCab() { return true; }
    This function returns true because all ZombieCab's are ZombieCab's. The function is virtual because it can be passed to all actors.


PUBLIC MEMBER FUNCTIONS IN OILSLICK CLASS
virtual void doSomething();
    This is the doSomething that all actors possess, but is specific to OilSlick's. It carries out this Actor's specific functions, as specified in the spec. It is virtual because all actors have a doSomething function.
void spinGR();
    This function is responsible for changing the direction of the GhostRacer when it passes over an OilSlick, making it appear as if it is spinning and playing the appropriate sound when it does. It is not virtual because it is specific to only GhostRacer.


PUBLIC MEMBER FUNCTIONS IN GOODIE CLASS
virtual void doSomething();
    This is the doSomething that all actors possess, but is specific to OilSlick's. It carries out this Actor's specific functions, as specified in the spec. It is virtual because all actors have a doSomething function.
virtual void goodieCollideGR() = 0;
    This function performs the functions specified in the spec for when a specific goodie overlaps with the GhostRacer. It is pure virtual because each goodie reacts in a different way.
virtual void moveSoul() { return; }
    This function rotates the soul as specified in the spec. It is to rotate every tick to appear that it is in constant rotation. It is virtual because it is called in the general doSomething function that applies to all Goodie's. 
virtual bool affectedByHW() { return true; }
    This function returns whether or not a Goodie is affected by holy water projectiles. The default is true because the only Goodie that is not affected in this manner is the SoulGoodie. It is virtual because it is specialized by the SoulGoodie, and behaves differently for it.
virtual bool goodieAffectedByHW() { return true; }
    This function returns whether or not the actor is affected by holy water projectiles. The default is true because the only actor in the Goodie class that is not affected in this manner is the SoulGoodie. It is virtual because it is specialized by the SoulGoodie, and behaves differently for it. It is also virtual because this function is present in the Actor superclass.


PUBLIC MEMBER FUNCTIONS IN HEALINGGOODIE CLASS
virtual void goodieCollideGR();
    This function adds to the health of the GhostRacer when collided with, increasing the GhostRacer's ten points unless the health has hit a maximum of 100 health points. It is virtual because each goodie reacts in a different way but all Goodie's respond in a specific way when colliding with the Ghost Racer.


PUBLIC MEMBER FUNCTIONS IN HOLYWATERGOODIE CLASS
virtual void goodieCollideGR();
    This function adds to the holy water charge of the GhostRacer when collided with. It is virtual because each goodie reacts in a different way but all Goodie's respond in a specific way when colliding with the Ghost Racer.


PUBLIC MEMBER FUNCTIONS IN SOULGOODIE CLASS
virtual void goodieCollideGR();
    This function adds to the number of souls a Ghost Racer has saved, making it closer to winning the current level. It is virtual because each goodie reacts in a different way but all Goodie's respond in a specific way when colliding with the Ghost Racer.
virtual void moveSoul() { setDirection(getDirection() - 10); }
    This function rotates the soul as specified in the spec. It is to rotate every tick to appear that it is in constant rotation. It is virtual because it is called in the general doSomething function that applies to all Goodie's, the default just returns.
virtual bool affectedByHW() { return false; }
    This function returns false because the SoulGoodie is not affected by holy water shots. It is virtual because it is specialized by the SoulGoodie, and behaves differently for it. It is also virtual because this function is present in the Actor superclass.
virtual bool goodieAffectedByHW() { return false; }
    This function returns whether or not the actor is affected by holy water projectiles, which is false for SouldGoodie's. The default is true because the only actor in the Goodie class that is not affected in this manner is the SoulGoodie. It is virtual because it is specialized by the SoulGoodie, and behaves differently for it. It is also virtual because this function is present in the Actor superclass.


PUBLIC MEMBER FUNCTIONS IN HOLYWATERPROJECTILE CLASS
virtual void doSomething();
    This is the doSomething that all actors possess, but is specific to HolyWaterProjectile's. It carries out this Actor's specific functions, as specified in the spec. It is virtual because all actors have a doSomething function.
void movePixels(int move) { m_pixelsLeft -= move; }
    This function keeps track of the 160 maximum pixels that a holy water projectile moves before dying, using a private data member. It is not virtual because it is specific to the HolyWaterProjectile class.


PUBLIC MEMBER FUNCTIONS IN STUDENTWORLD CLASS
StudentWorld(std::string assetPath);
    This is the constructor provided in the framework given.
~StudentWorld();
    This StudentWorld destructor calls cleanup() in order to delete the allocated objects in the actors vector, in order to prevent memory leaks.
virtual int init();
    The init function initializes the data structures used to keep track of my game’s world. It allocates and inserts a Ghost Racer object into the game world, as well as yellow and white border lines. This function is virtual because it is defined as pure virtual in GameWorld, StudentWorld's base class.
virtual int move();
    The move function tell all of the actors that are currently active in the game world to do something (e.g., tell a pedestrian to move itself, tell a goodie to check if it overlaps with Ghost Racer (and if so, grant it a special power), give Ghost Racer a chance to move or shoot holy water, etc.). The function then deletes any actors that have died during this tick. It then will add any new objects to the game and update the status text on the top of the screen with the latest information. If the GhostRacer dies or saves enough souls to end the level, the move function will return the appropriate value to indicate this has happened. This function is virtual because it is defined as pure virtual in GameWorld, StudentWorld's base class.
        Here is a more detailed version of the steps taken in the move function:
            Loop through all actors, have each one do something
            Check if the GhostRacer is dead. If so, return that it has died.
            Check if the GhostRacer has saved enough souls, and if so, return the appropriate value.
            Delete the dead actors.
            Add the new actors:
                Add new borderlines
                Add human pedestrians
                Add zombie pedestrians
                Add oil slicks
                Add appropriate goodies
                    Holy water
                    Soul Goodies
                Add zombie cabs
            Update game text on top of screen
            If the GhostRacer is dead, return the appropriate value.
            If not, return continue the game.
virtual void cleanUp();
    When the cleanUp method is called, it means that Ghost Racer lost a life (e.g., its hit points went to zero or below due to hitting too many zombie pedestrians and/or zombie cabs, by bumping into the sides of the freeway, or ran into a human pedestrian) or has completed the current level. Every actor must be deleted and removed from the StudentWorld’s container of active objects, resulting in an empty level. If the user has more lives left, the provided skeleton will subsequently call my init() method to reload and repopulate the level with a new set of actors, and the level will then continue from scratch. This function is also used by my destructor to delete the remaining actors. This function is virtual because it is defined as pure virtual in GameWorld, StudentWorld's base class.
GameWorld* getStudentWorld() { return this; }
    This function returns the StudentWorld. This is used to call StudentWorld functions when needed. This function is not virtual because it is specific to the StudentWorld class and the StudentWorld class does not have any derived classes and is not used by GameWorld.
Actor* getGhost() { return actors[0]; }
    This function returns the StudentWorld's GhostRacer, by returning the first actor in the actors vector. This function is not virtual because it is specific to the StudentWorld class and the StudentWorld class does not have any derived classes and is not used by GameWorld.
void pushActor(Actor* toPush) { actors.push_back(toPush); }
    This function pushes an actor onto the vector of actors. This function is not virtual because it is specific to the StudentWorld class and the StudentWorld class does not have any derived classes and is not used by GameWorld.
Actor* findOverlappingActor(Actor* HW)
{
    for (int i = 0; i < actors.size(); i++)
    {
        if (HW->overlapOtherActor(actors[i]))
            return actors[i];
    }
    return nullptr;
}
    The findOverlappingActor function returns an actor that is found that the holy water projectile comes in contact with. It returns once it has found one because as specified in the spec, if multiple objects overlap with a holy water projectile, I was able to pick any one and ignore the others. It is not virtual because StudentWorld does not have any derived classes, and CAWAinFront is not used by GameWorld.
bool CAWAInFront(Actor* zc);
    This function is used by my ZombieCab doSomething. It loops through the actors and returns true if there is collision-avoidance worthy actor that is in front of and is in the same lane as the ZombieCab. It is not virtual because StudentWorld does not have any derived classes, and CAWAinFront is not used by GameWorld.
bool CAWAInBack(Actor* zc);
    This function is used by my ZombieCab doSomething. It loops through the actors and returns true if there is collision-avoidance worthy actor that is behind and is in the same lane as the ZombieCab. It is not virtual because StudentWorld does not have any derived classes, and CAWAinBack is not used by GameWorld.
Actor* closestActorFront(Actor* zc);
    This function is used by my ZombieCab doSomething. It loops through the actors and finds the closest collision-avoidance worthy actor in the same lane as the ZombieCab that is in front of it, which is passed in as a parameter. It is not virtual because StudentWorld does not have any derived classes, and closestActorFront is not used by GameWorld.
Actor* closestActorBack(Actor* zc);
    This function is used by my ZombieCab doSomething. It loops through the actors and finds the closest collision-avoidance worthy actor in the same lane as the ZombieCab that is behind it, which is passed in as a parameter. It is not virtual because StudentWorld does not have any derived classes, and closestActorBack is not used by GameWorld.
Actor* closestToBottom(int lane);
    This function finds the closest collision-avoidance worthy actor in the lane specified by the parameter that is the closest to the bottom. It does this because it will only add a new ZombieCab is there is no such actor or if the actor is in the top 2/3 of the screen. It is not virtual because StudentWorld does not have any derived classes, and closestToBottom is not used by GameWorld.
Actor* closestToTop(int lane);
    This function finds the closest collision-avoidance worthy actor in the lane specified by the parameter that is the closest to the top of the screen. It does this because it will only add a new ZombieCab is there is no such actor or if the actor is in the bottom 1/3 of the screen. It is not virtual because StudentWorld does not have any derived classes, and closestToBottom is not used by GameWorld.


I did not fail to implement any of the functionality in the spec. All my actors work as specified in the spec.


An assumption I had to make was what to do when changing the direction of the GhostRacer as the result of an OilSlick. Here is the part of the spec that confused me:
        Ghost Racer can be spun around (by driving over an oil slick). If an oil slick tries to spin Ghost Racer, Ghost Racer must adjust its direction by a random integer between [5, 20] degrees clockwise or counterclockwise of its current direction. Ghost Racer’s angle must never go below 60 degrees or above 120 degrees.
The reason I was confused by this portion of the spec is because I was not sure what to do if the resulting direction of the GhostRacer was outside of the 60 to 120 degree range. Some potential solutions I thought of were to add or subtract up to 60 or 120, or to not move the GhostRacer at all. Knowing that the GhostRacer will move either counterclockwise or clockwise, what I ended up doing was just moving in the other direction if it went outside of the 60 to 120 degree range.
